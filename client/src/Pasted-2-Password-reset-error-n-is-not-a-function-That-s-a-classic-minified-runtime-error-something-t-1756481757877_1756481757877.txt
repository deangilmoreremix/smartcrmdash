2) Password reset error: “n is not a function”

That’s a classic minified runtime error (something that isn’t a function is being called like one). In the Supabase recovery flow this usually comes from one of these:

Common causes

Calling the wrong API on the recovery page
On /auth/recovery, you should not call resetPasswordForEmail again. You only need to set the new password:

await supabase.auth.updateUser({ password: newPassword })


Using v1 methods with v2 SDK
If you call supabase.auth.api.* in v2, you’ll hit weird runtime errors. Ensure you only use v2 methods.

Wrong import / duplicate versions
Two versions of @supabase/supabase-js or a wrong import can cause this. Make sure:

Only @supabase/supabase-js@^2 is installed

You import from @supabase/supabase-js, not @supabase/auth-helpers-* in places where you don’t need them

Misusing the return of an auth call
E.g., expecting a function on data and calling it (data()), or destructuring wrong.

Bad unsubscribe pattern
If you set up onAuthStateChange, make sure you call subscription.unsubscribe() (not calling something else). In v2:

const { data: { subscription } } = supabase.auth.onAuthStateChange(() => {})
// later
subscription.unsubscribe()


Known-good recovery page
Drop this onto your /auth/recovery route. It handles the token from the URL and updates the password properly with v2:

// RecoveryPage.tsx (React + Vite style)
import { useEffect, useState } from "react";
import { createClient } from "@supabase/supabase-js";

const supabase = createClient(
  import.meta.env.VITE_SUPABASE_URL!,
  import.meta.env.VITE_SUPABASE_ANON_KEY!
);

export default function RecoveryPage() {
  const [status, setStatus] = useState<"idle"|"ready"|"updating"|"done"|"error">("idle");
  const [error, setError] = useState<string>("");
  const [password, setPassword] = useState("");
  const [confirm, setConfirm] = useState("");

  // Ensure the recovery session is picked up from the URL (access_token, type=recovery)
  useEffect(() => {
    // supabase-js v2 automatically detects the session in the URL by default.
    // If you turned off detectSessionInUrl, handle it manually:
    // supabase.auth.exchangeCodeForSession(window.location.href)

    const url = new URL(window.location.href);
    const type = url.searchParams.get("type");
    const accessToken = url.searchParams.get("access_token");

    if (type === "recovery" && accessToken) {
      // Optionally verify session:
      supabase.auth.getSession().then(({ data }) => {
        if (data.session) setStatus("ready");
        else setStatus("ready"); // still allow; supabase will accept updateUser after link click
      });
    } else {
      setStatus("error");
      setError("Invalid or expired recovery link.");
    }
  }, []);

  const submit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");

    if (password.length < 8) {
      setError("Password must be at least 8 characters.");
      return;
    }
    if (password !== confirm) {
      setError("Passwords do not match.");
      return;
    }

    setStatus("updating");
    const { error } = await supabase.auth.updateUser({ password });
    if (error) {
      setStatus("error");
      setError(error.message);
      return;
    }
    setStatus("done");
  };

  if (status === "error") {
    return <div style={{ padding: 24 }}><h3>Reset Link Error</h3><p>{error}</p></div>;
  }

  if (status === "done") {
    return (
      <div style={{ padding: 24 }}>
        <h3>Password Updated</h3>
        <p>Your password has been changed. You can now sign in with your new credentials.</p>
      </div>
    );
  }

  return (
    <div style={{ padding: 24, maxWidth: 420 }}>
      <h3>Set a New Password</h3>
      <form onSubmit={submit}>
        <div style={{ marginTop: 12 }}>
          <label>New password</label>
          <input
            type="password"
            value={password}
            onChange={(e)=>setPassword(e.target.value)}
            style={{ width:"100%", padding: 10, marginTop: 6 }}
          />
        </div>
        <div style={{ marginTop: 12 }}>
          <label>Confirm password</label>
          <input
            type="password"
            value={confirm}
            onChange={(e)=>setConfirm(e.target.value)}
            style={{ width:"100%", padding: 10, marginTop: 6 }}
          />
        </div>
        {error && <p style={{ color: "crimson", marginTop: 12 }}>{error}</p>}
        <button
          type="submit"
          disabled={status !== "ready" && status !== "updating"}
          style={{ marginTop: 16, padding: "10px 16px" }}
        >
          {status === "updating" ? "Updating..." : "Update Password"}
        </button>
      </form>
    </div>
  );
}


Package sanity check

# should show only one supabase-js and it should be v2
npm ls @supabase/supabase-js


Code sanity check (what to remove/change)

Remove all uses of supabase.auth.api.* (v1-only).

Make sure you’re not doing supabase.auth.updateUser(password) (needs an object).

Don’t call resetPasswordForEmail on the recovery page.

If you set up onAuthStateChange, unsubscribe with subscription.unsubscribe().

Dashboard sanity check

In Supabase → Auth → URL Configuration: your Additional Redirect URLs include
https://smart-crm.videoremix.io/auth/recovery (and your dev origins).

Your emails all use {{ .ConfirmationURL }}.