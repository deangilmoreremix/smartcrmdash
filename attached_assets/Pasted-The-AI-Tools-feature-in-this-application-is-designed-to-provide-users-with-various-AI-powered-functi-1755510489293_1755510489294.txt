The AI Tools feature in this application is designed to provide users with various AI-powered functionalities directly within the CRM. It's structured to be modular and extensible, allowing for easy integration of new AI capabilities.

Here's a breakdown of how it's put together:

1. Main Entry Point: src/pages/AITools.tsx
This file serves as the primary page for the AI Tools feature.
It displays a grid or list of all available AI tools, categorized for easier navigation.
Each tool is represented by a card with a title, description, and an icon.
It uses the useAITools hook (from AIToolsProvider) to trigger the opening of a specific AI tool's modal when a user clicks on a tool card.
It also includes search and filtering capabilities to help users find specific tools.
2. AI Tools Context and Modal Management: src/components/AIToolsProvider.tsx and src/components/shared/AIToolModal.tsx
AIToolsProvider.tsx: This component acts as a React Context Provider.
It wraps the entire application (or a significant part of it, as seen in src/main.tsx) to make the AI tool functionality globally available.
It manages the state for whether an AI tool modal is open (isToolOpen) and which tool is currently selected (currentTool).
The openTool function sets the currentTool and opens the modal, while closeTool closes it.
It contains a mapping (getToolInfo) that associates each AIToolType (e.g., 'email-analysis', 'streaming-chat') with its display information (title, icon) and the actual React component that implements its functionality.
AIToolModal.tsx: This is a reusable presentational component for displaying any AI tool within a modal dialog.
It receives the isOpen, onClose, title, icon, and children (the specific AI tool component) as props.
It provides a consistent UI for all AI tools, including a header, close button, and a content area where the specific tool's UI is rendered.
3. AI Service Integrations: src/services/*.ts
The application integrates with various AI models and services through dedicated service files:

src/services/openaiService.ts: Provides functions for interacting with the OpenAI API (e.g., generateEmailDraft, predictLeadScore, analyzeCustomerEmail, generateMeetingSummary, generateProposal, generateCallScript, generateSalesForecast, analyzeCompetitor, generateVisualContentIdea, analyzeMarketTrends, analyzeDeal). It uses the openai npm package.
src/services/geminiService.ts: Provides functions for interacting with the Google Gemini API (e.g., generateCustomerPersona, optimizeVoiceTone, analyzeSentimentRealTime, generateMeetingAgenda, and various reasoning-based content generation functions). It uses the @google/generative-ai npm package.
src/services/openaiStreamingService.ts: Handles real-time streaming responses from both OpenAI and Gemini models for chat interfaces and live analysis.
src/services/openaiAssistantsService.ts: Manages interactions with the OpenAI Assistants API, allowing for persistent, context-aware AI assistants that can perform multi-turn conversations and tool use.
src/services/openaiEmbeddingsService.ts: Used for semantic search, it generates vector embeddings of text data (like contacts and deals) and calculates similarity scores for natural language queries.
src/services/openaiVisionService.ts: Integrates with GPT-4 Vision for analyzing images and extracting insights from visual content.
src/services/openAiFunctionService.ts: Implements OpenAI's function-calling capabilities, allowing the AI assistant to interact with predefined CRM functions (e.g., searchDeals, createTask).
src/services/edgeFunctionService.ts: This file acts as an intermediary, potentially calling Supabase Edge Functions which then interact with the AI APIs. This is a common pattern to secure API keys and offload processing.
4. API Key Management: src/store/apiStore.ts
This Zustand store is responsible for managing the OpenAI and Google Gemini API keys.
It uses zustand/middleware/persist to store the API keys locally (e.g., in localStorage), so users don't have to re-enter them on every visit.
AI service files retrieve the necessary API keys from this store.
5. Individual AI Tool Components: src/components/aiTools/*.tsx
Each specific AI functionality (e.g., EmailAnalysisContent, StreamingChat, LiveDealAnalysis, AutoFormCompleter) is implemented as a separate React component within the src/components/aiTools directory.
These components contain the UI logic, form handling, and calls to the respective AI service functions to perform their tasks.
They often use the AIToolContent component (or similar patterns) to display loading states, errors, and formatted results consistently.
Flow of Interaction
User navigates to AI Tools page: src/pages/AITools.tsx loads and displays all available tools.
User selects a tool: When a user clicks on a tool card (e.g., "Email Analysis"), AITools.tsx calls openTool from the useAITools context.
Modal opens: AIToolsProvider updates its state, which causes AIToolModal to render. AIToolModal then renders the specific AI tool component (e.g., EmailAnalysisContent) as its children.
User interacts with the tool: Inside the specific tool component, the user provides input (e.g., pastes an email, types a query).
AI service call: The tool component calls a relevant function from one of the AI service files (e.g., openaiService.analyzeCustomerEmail).
API key retrieval: The AI service function retrieves the necessary API key from apiStore.
AI processing: The AI service makes a request to the external AI API (OpenAI, Gemini, or an Edge Function).
Results display: The AI service returns the processed data. The tool component updates its state to display the results, along with any loading indicators or error messages managed by AIToolContent.
User closes modal: The user closes the AIToolModal, and the AIToolsProvider resets its state.
This modular architecture allows for easy addition of new AI tools, updates to underlying AI models, and consistent user experience across all AI functionalities.