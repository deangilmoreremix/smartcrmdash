import { serve } from 'https://deno.land/std@0.168.0/http/server.ts'
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    // Create Supabase client
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_ANON_KEY') ?? '',
      {
        global: {
          headers: { Authorization: req.headers.get('Authorization')! },
        },
      }
    )

    const { method } = req
    const url = new URL(req.url)
    const pathParts = url.pathname.split('/').filter(part => part !== '')
    const dealId = pathParts[pathParts.length - 1]

    switch (method) {
      case 'GET':
        // Get single deal or list deals
        if (dealId && dealId !== 'deals' && !isNaN(parseInt(dealId))) {
          const { data, error } = await supabaseClient
            .from('deals')
            .select('*')
            .eq('id', parseInt(dealId))
            .single()
            
          if (error) throw error
          
          return new Response(
            JSON.stringify({ deal: data }),
            { 
              headers: { ...corsHeaders, 'Content-Type': 'application/json' },
              status: 200 
            }
          )
        } else {
          // List deals - ULTRA SAFE VERSION (no filtering by stage/status)
          const limit = parseInt(url.searchParams.get('limit') || '50')
          const offset = parseInt(url.searchParams.get('offset') || '0')
          
          let query = supabaseClient
            .from('deals')
            .select('*', { count: 'exact' })
            .range(offset, offset + limit - 1)
            .order('created_at', { ascending: false })

          const { data, error, count } = await query
          if (error) throw error

          return new Response(
            JSON.stringify({
              deals: data || [],
              total: count || 0,
              limit,
              offset,
              hasMore: (count || 0) > offset + limit
            }),
            { 
              headers: { ...corsHeaders, 'Content-Type': 'application/json' },
              status: 200 
            }
          )
        }

      case 'POST':
        // Create a new deal - ultra safe version
        const dealData = await req.json()
        
        // Only use basic fields that definitely exist
        const dbDeal = {
          title: dealData.title || 'Untitled Deal',
          description: dealData.description || '',
          value: dealData.value || 0,
          probability: dealData.probability || 50,
          expected_close_date: dealData.expectedCloseDate || null,
          contact_id: dealData.contactId || null,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        }

        const { data, error } = await supabaseClient
          .from('deals')
          .insert([dbDeal])
          .select()
          .single()

        if (error) throw error

        return new Response(
          JSON.stringify({ deal: data }),
          { 
            headers: { ...corsHeaders, 'Content-Type': 'application/json' },
            status: 201 
          }
        )

      case 'PATCH':
        // Update a deal
        if (!dealId || isNaN(parseInt(dealId))) {
          throw new Error('Deal ID is required for updates')
        }

        const updateData = await req.json()
        const dbUpdateData = {
          updated_at: new Date().toISOString()
        }

        // Only update basic fields
        if (updateData.title !== undefined) dbUpdateData.title = updateData.title
        if (updateData.description !== undefined) dbUpdateData.description = updateData.description
        if (updateData.value !== undefined) dbUpdateData.value = updateData.value
        if (updateData.probability !== undefined) dbUpdateData.probability = updateData.probability
        if (updateData.expectedCloseDate !== undefined) dbUpdateData.expected_close_date = updateData.expectedCloseDate
        if (updateData.contactId !== undefined) dbUpdateData.contact_id = updateData.contactId

        const { data: updateResult, error: updateError } = await supabaseClient
          .from('deals')
          .update(dbUpdateData)
          .eq('id', parseInt(dealId))
          .select()
          .single()

        if (updateError) throw updateError

        return new Response(
          JSON.stringify({ deal: updateResult }),
          { 
            headers: { ...corsHeaders, 'Content-Type': 'application/json' },
            status: 200 
          }
        )

      case 'DELETE':
        // Delete a deal
        if (!dealId || isNaN(parseInt(dealId))) {
          throw new Error('Deal ID is required for deletion')
        }

        const { error: deleteError } = await supabaseClient
          .from('deals')
          .delete()
          .eq('id', parseInt(dealId))

        if (deleteError) throw deleteError

        return new Response(
          JSON.stringify({ success: true }),
          { 
            headers: { ...corsHeaders, 'Content-Type': 'application/json' },
            status: 200 
          }
        )

      default:
        return new Response(
          JSON.stringify({ error: `Method ${method} not allowed` }),
          { 
            headers: { ...corsHeaders, 'Content-Type': 'application/json' },
            status: 405 
          }
        )
    }

  } catch (error) {
    console.error('Edge function error:', error)
    
    return new Response(
      JSON.stringify({ 
        error: error.message,
        details: error.details || null 
      }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 500 
      }
    )
  }
})